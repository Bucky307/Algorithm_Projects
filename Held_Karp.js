/*
Buck Harris 
W10088465
11/29/2022
Sources Used:
https://stackoverflow.com/questions/61626526/iterate-through-all-potential-starting-positions-in-held-karp-algorithm-utilizin
https://www.geeksforgeeks.org/dynamic-programming/
https://stackoverflow.com/questions/5767325/how-can-i-remove-a-specific-item-from-an-array#:~:text=Find%20the%20index%20of%20the,and%2For%20adding%20new%20elements.&text=The%20second%20parameter%20of%20splice%20is%20the%20number%20of%20elements%20to%20remove.
https://www.digitalocean.com/community/tutorials/java-remove-array-elements
https://love2dev.com/blog/javascript-remove-from-array/
help from tutor on memoization impementation
Used sources from assignment 2 as well (for the key and JSON for the memoization)
*/

let mem; //initialize global variable mem (for dynamic programing/memoization)
function tsp_hk(distance_matrix)
  {
    mem = []; // reset for each time as to not consume too much memory too fast 
    let cities = Array.from(Array(distance_matrix.length).keys()) //makes array from 0 to n length of graph
    var temp;
  var min = Infinity; //initialize min
  for(var i=0; i<distance_matrix.length; i++){ // loop to try every starting position
    temp = heldKarp(distance_matrix, cities, i); // hold the cost
    if (temp < min) min = temp; // change min if cost is lower
  }
  return min; //return min cost
  }

function heldKarp(dist, cities, start) // the psudocode coded
{
  let startIndex = cities.indexOf(start); //save start index
  let min = Infinity; //initialize min
  let cityNoStart = cities.slice(0, startIndex).concat(cities.slice(startIndex+1)); //cut out the start from the list of cities
  if (cities.length == 2)
    return dist[start][cityNoStart[0]];
  else
  {
    var key = JSON.stringify(cities); //so we have a key for an exact path
    if (mem[key] === undefined ) mem[key]=[]; // if it doesnt exits make a new slot
    if (mem[key][startIndex] !== undefined) return mem[key][startIndex]; //if there is something there return it it is the min
    for (let city = 0; city < cityNoStart.length; city++) // more of the psudocode coded
      {
        temp = heldKarp(dist, cityNoStart, cityNoStart[city]) + dist[start][cityNoStart[city]]; 
        if (temp < min) //if cost is less that min change min
          min = temp;
      }
        
  }
  mem[key][startIndex] = min; //set key and start to min (for dynamic programing)
  return min; //return the min
  
}
//graphs (same as problem 2)
let dist = [];
dist[2] = [
  [0,1,2],
  [1,0,2],
  [2,2,0]
];

dist[3] = [
  [0,4,1,3],
  [4,0,2,1],
  [1,2,0,5],
  [3,1,5,0]
];
dist[4] = [
  [0,4,1,3,1],
  [4,0,2,1,2],
  [1,2,0,5,3],
  [3,1,5,0,4],
  [1,2,3,4,0]
];
dist[5] = [
  [0,4,1,3,1,1],
  [4,0,2,1,2,2],
  [1,2,0,5,3,3],
  [3,1,5,0,4,4],
  [1,2,3,4,0,5],
  [1,2,3,4,5,0]
];
dist[6] = [
  [0,4,1,3,1,1,6],
  [4,0,2,1,2,2,5],
  [1,2,0,5,3,3,4],
  [3,1,5,0,4,4,3],
  [1,2,3,4,0,5,2],
  [1,2,3,4,5,0,1],
  [6,5,4,3,2,1,0]
];
dist[7] = [
  [0,4,1,3,1,1,6,2],
  [4,0,2,1,2,2,5,2],
  [1,2,0,5,3,3,4,3],
  [3,1,5,0,4,4,3,3],
  [1,2,3,4,0,5,2,4],
  [1,2,3,4,5,0,1,4],
  [6,5,4,3,2,1,0,7],
  [2,2,3,3,4,4,7,0]
];
dist[8] = [
  [0,4,1,3,1,1,6,2,9],
  [4,0,2,1,2,2,5,2,9],
  [1,2,0,5,3,3,4,3,9],
  [3,1,5,0,4,4,3,3,9],
  [1,2,3,4,0,5,2,4,9],
  [1,2,3,4,5,0,1,4,9],
  [6,5,4,3,2,1,0,7,9],
  [2,2,3,3,4,4,7,0,9],
  [9,9,9,9,9,9,9,9,0]
];
dist[9] = [
  [0,4,1,3,1,1,6,2,9,1],
  [4,0,2,1,2,2,5,2,9,2],
  [1,2,0,5,3,3,4,3,9,2],
  [3,1,5,0,4,4,3,3,9,1],
  [1,2,3,4,0,5,2,4,9,2],
  [1,2,3,4,5,0,1,4,9,1],
  [6,5,4,3,2,1,0,7,9,2],
  [2,2,3,3,4,4,7,0,9,1],
  [9,9,9,9,9,9,9,9,0,4],
  [1,2,2,1,2,1,2,1,4,0]
];
dist[10] = [
  [0,4,1,3,1,1,6,2,9,1,12],
  [4,0,2,1,2,2,5,2,9,2,12],
  [1,2,0,5,3,3,4,3,9,2,11],
  [3,1,5,0,4,4,3,3,9,1,1],
  [1,2,3,4,0,5,2,4,9,2,1],
  [1,2,3,4,5,0,1,4,9,1,5],
  [6,5,4,3,2,1,0,7,9,2,6],
  [2,2,3,3,4,4,7,0,9,1,0],
  [9,9,9,9,9,9,9,9,0,4,8],
  [1,2,2,1,2,1,2,1,4,0,7],
  [12,12,11,1,1,5,6,0,8,7,0]
];
dist[11] = [
  [0,4,1,3,1,1,6,2,9,1,12,7],
  [4,0,2,1,2,2,5,2,9,2,12,7],
  [1,2,0,5,3,3,4,3,9,2,11,7],
  [3,1,5,0,4,4,3,3,9,1,1,7],
  [1,2,3,4,0,5,2,4,9,2,1,7],
  [1,2,3,4,5,0,1,4,9,1,5,7],
  [6,5,4,3,2,1,0,7,9,2,6,7],
  [2,2,3,3,4,4,7,0,9,1,0,7],
  [9,9,9,9,9,9,9,9,0,4,8,7],
  [1,2,2,1,2,1,2,1,4,0,7,7],
  [12,12,11,1,1,5,6,0,8,7,0,7],
  [7,7,7,7,7,7,7,7,7,7,7,0]
];
dist[12] = [
  [0,4,1,3,1,1,6,2,9,1,12,7,0],
  [4,0,2,1,2,2,5,2,9,2,12,7,0],
  [1,2,0,5,3,3,4,3,9,2,11,7,0],
  [3,1,5,0,4,4,3,3,9,1,1,7,3],
  [1,2,3,4,0,5,2,4,9,2,1,7,3],
  [1,2,3,4,5,0,1,4,9,1,5,7,5],
  [6,5,4,3,2,1,0,7,9,2,6,7,5],
  [2,2,3,3,4,4,7,0,9,1,0,7,7],
  [9,9,9,9,9,9,9,9,0,4,8,7,1],
  [1,2,2,1,2,1,2,1,4,0,7,7,6],
  [12,12,11,1,1,5,6,0,8,7,0,7,8],
  [7,7,7,7,7,7,7,7,7,7,7,0,0],
  [0,0,0,3,3,5,5,7,1,8,0,0]
];
dist[13] = [
  [0,4,1,3,1,1,6,2,9,1,12,7,0,6],
  [4,0,2,1,2,2,5,2,9,2,12,7,0,6],
  [1,2,0,5,3,3,4,3,9,2,11,7,0,6],
  [3,1,5,0,4,4,3,3,9,1,1,7,3,6],
  [1,2,3,4,0,5,2,4,9,2,1,7,3,6],
  [1,2,3,4,5,0,1,4,9,1,5,7,5,6],
  [6,5,4,3,2,1,0,7,9,2,6,7,5,6],
  [2,2,3,3,4,4,7,0,9,1,0,7,7,6],
  [9,9,9,9,9,9,9,9,0,4,8,7,1,6],
  [1,2,2,1,2,1,2,1,4,0,7,7,6,6],
  [12,12,11,1,1,5,6,0,8,7,0,7,8,6],
  [7,7,7,7,7,7,7,7,7,7,7,0,0,6],
  [0,0,0,3,3,5,5,7,1,8,0,0,6],
  [6,6,6,6,6,6,6,6,6,6,6,6,6,0]
];
dist[14] = [
  [0,4,1,3,1,1,6,2,9,1,12,7,0,6,0],
  [4,0,2,1,2,2,5,2,9,2,12,7,0,6,0],
  [1,2,0,5,3,3,4,3,9,2,11,7,0,6,0],
  [3,1,5,0,4,4,3,3,9,1,1,7,3,6,0],
  [1,2,3,4,0,5,2,4,9,2,1,7,3,6,0],
  [1,2,3,4,5,0,1,4,9,1,5,7,5,6,0],
  [6,5,4,3,2,1,0,7,9,2,6,7,5,6,0],
  [2,2,3,3,4,4,7,0,9,1,0,7,7,6,0],
  [9,9,9,9,9,9,9,9,0,4,8,7,1,6,0],
  [1,2,2,1,2,1,2,1,4,0,7,7,6,6,0],
  [12,12,11,1,1,5,6,0,8,7,0,7,8,61],
  [7,7,7,7,7,7,7,7,7,7,7,0,0,6,55],
  [0,0,0,3,3,5,5,7,1,8,0,0,6,0],
  [6,6,6,6,6,6,6,6,6,6,6,6,6,0,0],
  [0,0,0,0,0,0,0,0,0,0,61,55,0,0,0]
];
dist[15] = [
  [0,4,1,3,1,1,6,2,9,1,12,7,0,6,0,1],
  [4,0,2,1,2,2,5,2,9,2,12,7,0,6,0,2],
  [1,2,0,5,3,3,4,3,9,2,11,7,0,6,0,3],
  [3,1,5,0,4,4,3,3,9,1,1,7,3,6,0,4],
  [1,2,3,4,0,5,2,4,9,2,1,7,3,6,0,5],
  [1,2,3,4,5,0,1,4,9,1,5,7,5,6,0,6],
  [6,5,4,3,2,1,0,7,9,2,6,7,5,6,0,7],
  [2,2,3,3,4,4,7,0,9,1,0,7,7,6,0,8],
  [9,9,9,9,9,9,9,9,0,4,8,7,1,6,0,9],
  [1,2,2,1,2,1,2,1,4,0,7,7,6,6,0,10],
  [12,12,11,1,1,5,6,0,8,7,0,7,8,61,11],
  [7,7,7,7,7,7,7,7,7,7,7,0,0,6,55,12],
  [0,0,0,3,3,5,5,7,1,8,0,0,6,0,13],
  [6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,14],
  [0,0,0,0,0,0,0,0,0,0,61,55,0,0,0,15],
  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0]
];
dist[16] = [
  [0,4,1,3,1,1,6,2,9,1,12,7,0,6,0,1,2],
  [4,0,2,1,2,2,5,2,9,2,12,7,0,6,0,2,2],
  [1,2,0,5,3,3,4,3,9,2,11,7,0,6,0,3,2],
  [3,1,5,0,4,4,3,3,9,1,1,7,3,6,0,4,2],
  [1,2,3,4,0,5,2,4,9,2,1,7,3,6,0,5,2],
  [1,2,3,4,5,0,1,4,9,1,5,7,5,6,0,6,2],
  [6,5,4,3,2,1,0,7,9,2,6,7,5,6,0,7,2],
  [2,2,3,3,4,4,7,0,9,1,0,7,7,6,0,8,2],
  [9,9,9,9,9,9,9,9,0,4,8,7,1,6,0,9,2],
  [1,2,2,1,2,1,2,1,4,0,7,7,6,6,0,10,2],
  [12,12,11,1,1,5,6,0,8,7,0,7,8,61,11,2],
  [7,7,7,7,7,7,7,7,7,7,7,0,0,6,55,12,2],
  [0,0,0,3,3,5,5,7,1,8,0,0,6,0,13,2],
  [6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,14,2],
  [0,0,0,0,0,0,0,0,0,0,61,55,0,0,0,15,2],
  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0,2],
  [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0]
];
dist[17] = [
  [0,4,1,3,1,1,6,2,9,1,12,7,0,6,0,1,2,0],
  [4,0,2,1,2,2,5,2,9,2,12,7,0,6,0,2,2,0],
  [1,2,0,5,3,3,4,3,9,2,11,7,0,6,0,3,2,0],
  [3,1,5,0,4,4,3,3,9,1,1,7,3,6,0,4,2,0],
  [1,2,3,4,0,5,2,4,9,2,1,7,3,6,0,5,2,0],
  [1,2,3,4,5,0,1,4,9,1,5,7,5,6,0,6,2,0],
  [6,5,4,3,2,1,0,7,9,2,6,7,5,6,0,7,2,0],
  [2,2,3,3,4,4,7,0,9,1,0,7,7,6,0,8,2,0],
  [9,9,9,9,9,9,9,9,0,4,8,7,1,6,0,9,2,0],
  [1,2,2,1,2,1,2,1,4,0,7,7,6,6,0,10,2,0],
  [12,12,11,1,1,5,6,0,8,7,0,7,8,61,11,2,0],
  [7,7,7,7,7,7,7,7,7,7,7,0,0,6,55,12,2,0],
  [0,0,0,3,3,5,5,7,1,8,0,0,6,0,13,2,0],
  [6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,14,2,0],
  [0,0,0,0,0,0,0,0,0,0,61,55,0,0,0,15,2,1],
  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0,2,0],
  [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,9],
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,9,0]
];
dist[18] = [
  [0,4,1,3,1,1,6,2,9,1,12,7,0,6,0,1,2,0,3],
  [4,0,2,1,2,2,5,2,9,2,12,7,0,6,0,2,2,0,3],
  [1,2,0,5,3,3,4,3,9,2,11,7,0,6,0,3,2,0,3],
  [3,1,5,0,4,4,3,3,9,1,1,7,3,6,0,4,2,0,3],
  [1,2,3,4,0,5,2,4,9,2,1,7,3,6,0,5,2,0,3],
  [1,2,3,4,5,0,1,4,9,1,5,7,5,6,0,6,2,0,2],
  [6,5,4,3,2,1,0,7,9,2,6,7,5,6,0,7,2,0,2],
  [2,2,3,3,4,4,7,0,9,1,0,7,7,6,0,8,2,0,2],
  [9,9,9,9,9,9,9,9,0,4,8,7,1,6,0,9,2,0,2],
  [1,2,2,1,2,1,2,1,4,0,7,7,6,6,0,10,2,0,2],
  [12,12,11,1,1,5,6,0,8,7,0,7,8,61,11,2,0,7],
  [7,7,7,7,7,7,7,7,7,7,7,0,0,6,55,12,2,0,7],
  [0,0,0,3,3,5,5,7,1,8,0,0,6,0,13,2,0,7],
  [6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,14,2,0,7],
  [0,0,0,0,0,0,0,0,0,0,61,55,0,0,0,15,2,1,7],
  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0,2,0,0],
  [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,9,0],
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,9,0,0],
  [3,3,3,3,3,2,2,2,2,2,7,7,7,7,7,0,0,0,0]
];
dist[19] = [
  [0,4,1,3,1,1,6,2,9,1,12,7,0,6,0,1,2,0,3,20],
  [4,0,2,1,2,2,5,2,9,2,12,7,0,6,0,2,2,0,3,20],
  [1,2,0,5,3,3,4,3,9,2,11,7,0,6,0,3,2,0,3,20],
  [3,1,5,0,4,4,3,3,9,1,1,7,3,6,0,4,2,0,3,20],
  [1,2,3,4,0,5,2,4,9,2,1,7,3,6,0,5,2,0,3,20],
  [1,2,3,4,5,0,1,4,9,1,5,7,5,6,0,6,2,0,2,20],
  [6,5,4,3,2,1,0,7,9,2,6,7,5,6,0,7,2,0,2,20],
  [2,2,3,3,4,4,7,0,9,1,0,7,7,6,0,8,2,0,2,20],
  [9,9,9,9,9,9,9,9,0,4,8,7,1,6,0,9,2,0,2,20],
  [1,2,2,1,2,1,2,1,4,0,7,7,6,6,0,10,2,0,2,20],
  [12,12,11,1,1,5,6,0,8,7,0,7,8,61,11,2,0,7,20],
  [7,7,7,7,7,7,7,7,7,7,7,0,0,6,55,12,2,0,7,20],
  [0,0,0,3,3,5,5,7,1,8,0,0,6,0,13,2,0,7,20],
  [6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,14,2,0,7,20],
  [0,0,0,0,0,0,0,0,0,0,61,55,0,0,0,15,2,1,7,20],
  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0,2,0,0,20],
  [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,9,0,20],
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,9,0,0,20],
  [3,3,3,3,3,2,2,2,2,2,7,7,7,7,7,0,0,0,0,20],
  [20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0]
];
dist[20] = [
  [0,4,1,3,1,1,6,2,9,1,12,7,0,6,0,1,2,0,3,20,1],
  [4,0,2,1,2,2,5,2,9,2,12,7,0,6,0,2,2,0,3,20,2],
  [1,2,0,5,3,3,4,3,9,2,11,7,0,6,0,3,2,0,3,20,3],
  [3,1,5,0,4,4,3,3,9,1,1,7,3,6,0,4,2,0,3,20,4],
  [1,2,3,4,0,5,2,4,9,2,1,7,3,6,0,5,2,0,3,20,5],
  [1,2,3,4,5,0,1,4,9,1,5,7,5,6,0,6,2,0,2,20,6],
  [6,5,4,3,2,1,0,7,9,2,6,7,5,6,0,7,2,0,2,20,7],
  [2,2,3,3,4,4,7,0,9,1,0,7,7,6,0,8,2,0,2,20,8],
  [9,9,9,9,9,9,9,9,0,4,8,7,1,6,0,9,2,0,2,20,9],
  [1,2,2,1,2,1,2,1,4,0,7,7,6,6,0,10,2,0,2,20,10],
  [12,12,11,1,1,5,6,0,8,7,0,7,8,61,11,2,0,7,20,11],
  [7,7,7,7,7,7,7,7,7,7,7,0,0,6,55,12,2,0,7,20,12],
  [0,0,0,3,3,5,5,7,1,8,0,0,6,0,13,2,0,7,20,13],
  [6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,14,2,0,7,20,14],
  [0,0,0,0,0,0,0,0,0,0,61,55,0,0,0,15,2,1,7,20,15],
  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0,2,0,0,20,16],
  [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,9,0,20,17],
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,9,0,0,20,18],
  [3,3,3,3,3,2,2,2,2,2,7,7,7,7,7,0,0,0,0,20,19],
  [20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,20],
  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,0]
];
dist[21] = [
  [0,4,1,3,1,1,6,2,9,1,12,7,0,6,0,1,2,0,3,20,1,6],
  [4,0,2,1,2,2,5,2,9,2,12,7,0,6,0,2,2,0,3,20,2,5],
  [1,2,0,5,3,3,4,3,9,2,11,7,0,6,0,3,2,0,3,20,3,6],
  [3,1,5,0,4,4,3,3,9,1,1,7,3,6,0,4,2,0,3,20,4,2],
  [1,2,3,4,0,5,2,4,9,2,1,7,3,6,0,5,2,0,3,20,5,2],
  [1,2,3,4,5,0,1,4,9,1,5,7,5,6,0,6,2,0,2,20,6,0],
  [6,5,4,3,2,1,0,7,9,2,6,7,5,6,0,7,2,0,2,20,7,0],
  [2,2,3,3,4,4,7,0,9,1,0,7,7,6,0,8,2,0,2,20,8,3],
  [9,9,9,9,9,9,9,9,0,4,8,7,1,6,0,9,2,0,2,20,9,5],
  [1,2,2,1,2,1,2,1,4,0,7,7,6,6,0,10,2,0,2,20,10,4],
  [12,12,11,1,1,5,6,0,8,7,0,7,8,61,11,2,0,7,20,11,3],
  [7,7,7,7,7,7,7,7,7,7,7,0,0,6,55,12,2,0,7,20,12,2],
  [0,0,0,3,3,5,5,7,1,8,0,0,6,0,13,2,0,7,20,13,1],
  [6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,14,2,0,7,20,14,0],
  [0,0,0,0,0,0,0,0,0,0,61,55,0,0,0,15,2,1,7,20,15,8],
  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0,2,0,0,20,16,5],
  [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,9,0,20,17,2],
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,9,0,0,20,18,8],
  [3,3,3,3,3,2,2,2,2,2,7,7,7,7,7,0,0,0,0,20,19,1],
  [20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,20,1],
  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,0,5],
  [6,5,6,2,2,0,0,3,5,4,3,2,1,0,8,5,2,8,1,1,5,0]
];
dist[22] = [
  [0,4,1,3,1,1,6,2,9,1,12,7,0,6,0,1,2,0,3,20,1,6,12],
  [4,0,2,1,2,2,5,2,9,2,12,7,0,6,0,2,2,0,3,20,2,5,12],
  [1,2,0,5,3,3,4,3,9,2,11,7,0,6,0,3,2,0,3,20,3,6,12],
  [3,1,5,0,4,4,3,3,9,1,1,7,3,6,0,4,2,0,3,20,4,2,12],
  [1,2,3,4,0,5,2,4,9,2,1,7,3,6,0,5,2,0,3,20,5,2,12],
  [1,2,3,4,5,0,1,4,9,1,5,7,5,6,0,6,2,0,2,20,6,0,12],
  [6,5,4,3,2,1,0,7,9,2,6,7,5,6,0,7,2,0,2,20,7,0,12],
  [2,2,3,3,4,4,7,0,9,1,0,7,7,6,0,8,2,0,2,20,8,3,12],
  [9,9,9,9,9,9,9,9,0,4,8,7,1,6,0,9,2,0,2,20,9,5,12],
  [1,2,2,1,2,1,2,1,4,0,7,7,6,6,0,10,2,0,2,20,10,4,12],
  [12,12,11,1,1,5,6,0,8,7,0,7,8,61,11,2,0,7,20,11,3,12],
  [7,7,7,7,7,7,7,7,7,7,7,0,0,6,55,12,2,0,7,20,12,2,12],
  [0,0,0,3,3,5,5,7,1,8,0,0,6,0,13,2,0,7,20,13,1,12],
  [6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,14,2,0,7,20,14,0,12],
  [0,0,0,0,0,0,0,0,0,0,61,55,0,0,0,15,2,1,7,20,15,8,12],
  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0,2,0,0,20,16,5,12],
  [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,9,0,20,17,2,12],
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,9,0,0,20,18,8,12],
  [3,3,3,3,3,2,2,2,2,2,7,7,7,7,7,0,0,0,0,20,19,1,12],
  [20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,20,1,12],
  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,0,5,12],
  [6,5,6,2,2,0,0,3,5,4,3,2,1,0,8,5,2,8,1,1,5,0,12],
  [12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0]
];
dist[23] = [
  [0,4,1,3,1,1,6,2,9,1,12,7,0,6,0,1,2,0,3,20,1,6,12,1],
  [4,0,2,1,2,2,5,2,9,2,12,7,0,6,0,2,2,0,3,20,2,5,12,1],
  [1,2,0,5,3,3,4,3,9,2,11,7,0,6,0,3,2,0,3,20,3,6,12,1],
  [3,1,5,0,4,4,3,3,9,1,1,7,3,6,0,4,2,0,3,20,4,2,12,1],
  [1,2,3,4,0,5,2,4,9,2,1,7,3,6,0,5,2,0,3,20,5,2,12,1],
  [1,2,3,4,5,0,1,4,9,1,5,7,5,6,0,6,2,0,2,20,6,0,12,1],
  [6,5,4,3,2,1,0,7,9,2,6,7,5,6,0,7,2,0,2,20,7,0,12,1],
  [2,2,3,3,4,4,7,0,9,1,0,7,7,6,0,8,2,0,2,20,8,3,12,1],
  [9,9,9,9,9,9,9,9,0,4,8,7,1,6,0,9,2,0,2,20,9,5,12,1],
  [1,2,2,1,2,1,2,1,4,0,7,7,6,6,0,10,2,0,2,20,10,4,12,1],
  [12,12,11,1,1,5,6,0,8,7,0,7,8,61,11,2,0,7,20,11,3,12,1],
  [7,7,7,7,7,7,7,7,7,7,7,0,0,6,55,12,2,0,7,20,12,2,12,1],
  [0,0,0,3,3,5,5,7,1,8,0,0,6,0,13,2,0,7,20,13,1,12,1],
  [6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,14,2,0,7,20,14,0,12,1],
  [0,0,0,0,0,0,0,0,0,0,61,55,0,0,0,15,2,1,7,20,15,8,12,1],
  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0,2,0,0,20,16,5,12,1],
  [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,9,0,20,17,2,12,1],
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,9,0,0,20,18,8,12,1],
  [3,3,3,3,3,2,2,2,2,2,7,7,7,7,7,0,0,0,0,20,19,1,12,1],
  [20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,20,1,12,1],
  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,0,5,12,1],
  [6,5,6,2,2,0,0,3,5,4,3,2,1,0,8,5,2,8,1,1,5,0,12,1],
  [12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,1],
  [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0]
];
dist[24] = [
  [0,4,1,3,1,1,6,2,9,1,12,7,0,6,0,1,2,0,3,20,1,6,12,1,1],
  [4,0,2,1,2,2,5,2,9,2,12,7,0,6,0,2,2,0,3,20,2,5,12,1,2],
  [1,2,0,5,3,3,4,3,9,2,11,7,0,6,0,3,2,0,3,20,3,6,12,1,3],
  [3,1,5,0,4,4,3,3,9,1,1,7,3,6,0,4,2,0,3,20,4,2,12,1,4],
  [1,2,3,4,0,5,2,4,9,2,1,7,3,6,0,5,2,0,3,20,5,2,12,1,5],
  [1,2,3,4,5,0,1,4,9,1,5,7,5,6,0,6,2,0,2,20,6,0,12,1,6],
  [6,5,4,3,2,1,0,7,9,2,6,7,5,6,0,7,2,0,2,20,7,0,12,1,7],
  [2,2,3,3,4,4,7,0,9,1,0,7,7,6,0,8,2,0,2,20,8,3,12,1,8],
  [9,9,9,9,9,9,9,9,0,4,8,7,1,6,0,9,2,0,2,20,9,5,12,1,9],
  [1,2,2,1,2,1,2,1,4,0,7,7,6,6,0,10,2,0,2,20,10,4,12,1,10],
  [12,12,11,1,1,5,6,0,8,7,0,7,8,61,11,2,0,7,20,11,3,12,1,11],
  [7,7,7,7,7,7,7,7,7,7,7,0,0,6,55,12,2,0,7,20,12,2,12,1,12],
  [0,0,0,3,3,5,5,7,1,8,0,0,6,0,13,2,0,7,20,13,1,12,1,13],
  [6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,14,2,0,7,20,14,0,12,1,14],
  [0,0,0,0,0,0,0,0,0,0,61,55,0,0,0,15,2,1,7,20,15,8,12,1,15],
  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0,2,0,0,20,16,5,12,1,16],
  [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,9,0,20,17,2,12,1,17],
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,9,0,0,20,18,8,12,1,18],
  [3,3,3,3,3,2,2,2,2,2,7,7,7,7,7,0,0,0,0,20,19,1,12,1,19],
  [20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,20,1,12,1,20],
  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,0,5,12,1,21],
  [6,5,6,2,2,0,0,3,5,4,3,2,1,0,8,5,2,8,1,1,5,0,12,1,22],
  [12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,1,23],
  [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,24],
  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,0]
];
// output of data
for (let i = 2; i < 25; i++)
  {
    var start = Date.now();
    var min = tsp_hk(dist[i]);
    var end = Date.now();
    console.log("The shortest tour for the " + (i+1) + "x" + (i+1) + " graph is: " + min);
    console.log("Time to complete: " + (end-start) + " ");
  }
